package {package_name};
{{ if not library_exported- }}
// TODO(b/303773055): Remove the annotation after access issue is resolved.
import android.compat.annotation.UnsupportedAppUsage;
{{ else }}
import android.os.Build;
{{ -endif }}
{{ -if single_exported_file }}
{{ -if library_exported }}
/**
 * @deprecated Use \{@link ExportedFlags} instead.
 */
@Deprecated {#- PREFER ExportedFlags #}
{{ -endif }}
{{ -else }}
/** @hide */
{{ -endif }}
public final class Flags \{
{{ -for item in flag_elements}}
    /** @hide */
    public static final String FLAG_{item.flag_name_constant_suffix} = "{item.device_config_flag}";
{{- endfor }}
{{ -for item in flag_elements}}
{{ -if not item.is_read_write }}
{{ -if item.default_value }}
    @com.android.aconfig.annotations.AssumeTrueForR8
{{ -else }}
    @com.android.aconfig.annotations.AssumeFalseForR8
{{ -endif }}
{{ -endif }}
{{ -if not library_exported }}
    @com.android.aconfig.annotations.AconfigFlagAccessor
    @UnsupportedAppUsage
{{ -endif }}
    public static boolean {item.method_name}() \{
        {{ -if item.finalized_sdk_present }}
        if (Build.VERSION.SDK_INT >= {item.finalized_sdk_value}) \{
          return true;
        }
        {{ -endif}}  {#- end finalized_sdk_present#}
        return FEATURE_FLAGS.{item.method_name}();
    }
{{ -endfor }}
{{ -if is_test_mode }}
    public static void setFeatureFlags(FeatureFlags featureFlags) \{
        Flags.FEATURE_FLAGS = featureFlags;
    }

    public static void unsetFeatureFlags() \{
        Flags.FEATURE_FLAGS = null;
    }
{{ -endif }}

    private static FeatureFlags FEATURE_FLAGS{{ -if not is_test_mode }} = new FeatureFlagsImpl(){{ -endif- }};

}
