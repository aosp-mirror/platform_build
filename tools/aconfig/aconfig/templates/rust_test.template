//! codegenerated rust flag lib
use aconfig_storage_read_api::\{Mmap, AconfigStorageError, StorageFileType, PackageReadContext, get_mapped_storage_file, get_boolean_flag_value, get_package_read_context};
use std::collections::BTreeMap;
use std::path::Path;
use std::io::Write;
use std::sync::\{LazyLock, Mutex};
use log::\{log, LevelFilter, Level};

/// flag provider
pub struct FlagProvider \{
    overrides: BTreeMap<&'static str, bool>,
}

{{ if has_readwrite- }}
static PACKAGE_CONTEXT: LazyLock<Result<Option<PackageReadContext>, AconfigStorageError>> = LazyLock::new(|| unsafe \{
    get_mapped_storage_file("{container}", StorageFileType::PackageMap)
    .and_then(|package_map| get_package_read_context(&package_map, "{package}"))
});

static FLAG_VAL_MAP: LazyLock<Result<Mmap, AconfigStorageError>> = LazyLock::new(|| unsafe \{
    get_mapped_storage_file("{container}", StorageFileType::FlagVal)
});

{{ -for flag in template_flags }}
{{ -if flag.readwrite }}
/// flag value cache for {flag.name}
static CACHED_{flag.name}: LazyLock<bool> = LazyLock::new(|| \{

    // This will be called multiple times. Subsequent calls after the first are noops.
    logger::init(
        logger::Config::default()
            .with_tag_on_device("aconfig_rust_codegen")
            .with_max_level(LevelFilter::Info));

    {{ -if use_package_fingerprint }}
    let fingerprint_check_failed: bool = PACKAGE_CONTEXT
        .as_ref()
        .is_ok_and(|package_context| \{
              match package_context \{
                Some(context) => \{
                        return context.fingerprint != {package_fingerprint}
                    },
                    None => \{
                        log!(Level::Info, "aconfig_rust_codegen: missing fingerprint; performing lookup.");
                        false
                    }
                  }
                });

    if fingerprint_check_failed \{
      log!(Level::Error, "Fingerprint mismatch for package {package}; returning flag default ({flag.default_value}) for {flag.name}.");
      return {flag.default_value};
    }
    {{ -endif }}

    let flag_value_result = FLAG_VAL_MAP
        .as_ref()
        .map_err(|err| format!("failed to get flag val map: \{err}"))
        .and_then(|flag_val_map| \{
            PACKAGE_CONTEXT
                .as_ref()
                .map_err(|err| format!("failed to get package read context: \{err}"))
                .and_then(|package_context| \{
                    match package_context \{
                        Some(context) => \{
                            get_boolean_flag_value(&flag_val_map, context.boolean_start_index + {flag.flag_offset})
                                .map_err(|err| format!("failed to get flag: \{err}"))
                        },
                        None => \{
                            log!(Level::Error, "no context found for package {package}");
                            Err(format!("failed to flag package {package}"))
                        }
                    }
                })
            });

    match flag_value_result \{
        Ok(flag_value) => \{
            return flag_value;
        },
        Err(err) => \{
            log!(Level::Error, "aconfig_rust_codegen: error: \{err}");
            return {flag.default_value};
        }
    }

});
{{ -endif }}
{{ -endfor }}
{{ -endif }}

impl FlagProvider \{
{{ for flag in template_flags }}
    /// query flag {flag.name}
    pub fn {flag.name}(&self) -> bool \{
        self.overrides.get("{flag.name}").copied().unwrap_or(
        {{ if flag.readwrite -}}
           *CACHED_{flag.name}
        {{ -else- }}
           {flag.default_value}
        {{ -endif }}
        )
    }

    /// set flag {flag.name}
    pub fn set_{flag.name}(&mut self, val: bool) \{
        self.overrides.insert("{flag.name}", val);
    }
{{ endfor }}

    /// clear all flag overrides
    pub fn reset_flags(&mut self) \{
        self.overrides.clear();
    }
}

/// flag provider
pub static PROVIDER: Mutex<FlagProvider> = Mutex::new(
    FlagProvider \{overrides: BTreeMap::new()}
);

{{ for flag in template_flags }}
/// query flag {flag.name}
#[inline(always)]
pub fn {flag.name}() -> bool \{
    PROVIDER.lock().unwrap().{flag.name}()
}

/// set flag {flag.name}
#[inline(always)]
pub fn set_{flag.name}(val: bool) \{
    PROVIDER.lock().unwrap().set_{flag.name}(val);
}
{{ endfor }}

/// clear all flag override
pub fn reset_flags() \{
    PROVIDER.lock().unwrap().reset_flags()
}
