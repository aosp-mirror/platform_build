package {package_name}; {#- CODEGEN FOR INTERNAL MODE FOR NEW STORAGE #}
// TODO(b/303773055): Remove the annotation after access issue is resolved.
import android.compat.annotation.UnsupportedAppUsage;
{{ -if runtime_lookup_required }}
{{ if is_platform_container }}
import android.os.flagging.PlatformAconfigPackageInternal;
{{ -else }} {#- else is_platform_container #}
import android.os.flagging.AconfigPackageInternal;
{{ -endif }} {#- end of is_platform_container#}
import android.util.Log;
{{ -endif }} {#- end of runtime_lookup_required#}
/** @hide */
public final class FeatureFlagsImpl implements FeatureFlags \{
{{ -if runtime_lookup_required }}
    private static final String TAG = "FeatureFlagsImpl";
    private static volatile boolean isCached = false;
{{ for flag in flag_elements }}
{{ -if flag.is_read_write }}
    private static boolean {flag.method_name} = {flag.default_value};
{{ -endif }} {#- end of is_read_write#}
{{ -endfor }} {#- else flag_elements #}

    private void init() \{
        try \{
{{ if is_platform_container }}
            PlatformAconfigPackageInternal reader = PlatformAconfigPackageInternal.load("{package_name}", {package_fingerprint});
{{ -else }} {#- else is_platform_container #}
            AconfigPackageInternal reader = AconfigPackageInternal.load("{package_name}", {package_fingerprint});
{{ -endif }} {#- end of is_platform_container#}
        {{ -for namespace_with_flags in namespace_flags }}
        {{ -for flag in namespace_with_flags.flags }}
        {{ -if flag.is_read_write }}
            {flag.method_name} = reader.getBooleanFlagValue({flag.flag_offset});
        {{ -endif }} {#- is_read_write#}
        {{ -endfor }} {#- else namespace_with_flags.flags #}
        {{ -endfor }}  {#- else namespace_flags #}
        } catch (Exception e) \{
            Log.e(TAG, e.toString());
        } catch (LinkageError e) \{
            // for mainline module running on older devices.
            // This should be replaces to version check, after the version bump.
            Log.e(TAG, e.toString());
        }
        isCached = true;
    }
{{ -endif }}{#- end of runtime_lookup_required #}
{{ -for flag in flag_elements }}
    @Override
    @com.android.aconfig.annotations.AconfigFlagAccessor
    @UnsupportedAppUsage
    public boolean {flag.method_name}() \{
{{ -if flag.is_read_write }}
        if (!isCached) \{
            init();
        }
        return {flag.method_name};
{{ -else }}{#- else is_read_write #}
        return {flag.default_value};
{{ -endif }}  {#- end of is_read_write#}
    }
{{ endfor }} {#- else flag_elements #}
}
